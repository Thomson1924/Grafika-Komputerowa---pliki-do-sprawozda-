package gk.lab3;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.geom.*;



public class SubroutineHierarchy extends JPanel {

	public static void main(String[] args) {
		JFrame window = new JFrame("Subroutine Hierarchy");
		window.setContentPane( new SubroutineHierarchy() );
		window.pack();
		window.setLocation(100,60);
		window.setResizable(false);
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setVisible(true);
	}



	private final static int WIDTH = 800;
	private final static int HEIGHT = 600;

	private final static double X_LEFT = -4;
	private final static double X_RIGHT = 4;
	private final static double Y_BOTTOM = -3;
	private final static double Y_TOP = 3;

	private final static Color BACKGROUND = Color.WHITE;

	private float pixelSize;

	private int frameNumber = 0;

	// TODO:  Define any other necessary state variables.


	private void drawWorld(Graphics2D g2) {

		// TODO: Draw the content of the scene.

		AffineTransform basicTransform = g2.getTransform();

		g2.setColor(Color.BLACK);
		g2.translate(-1.1, -0.3);
		rotatingPolygon(g2);
		g2.setTransform(basicTransform);

		g2.setColor(Color.BLACK);
		g2.translate(1.1, -0.9);
		rotatingPolygon(g2);
		g2.setTransform(basicTransform);


		g2.setColor(Color.RED);
		g2.translate(0, -0.6);
		rotatedRectangle(g2);
		g2.setTransform(basicTransform);


		g2.setColor(Color.BLUE);
		g2.translate(0, -2.8);
		triangle(g2);
		g2.setTransform(basicTransform);


		g2.setColor(Color.BLACK);
		g2.translate(-3.1, 2.3);
		g2.scale(0.5, 0.5);
		rotatingPolygon(g2);
		g2.setTransform(basicTransform);


		g2.setColor(Color.BLACK);
		g2.translate(-2, 2);
		g2.scale(0.5, 0.5);
		rotatingPolygon(g2);
		g2.setTransform(basicTransform);


		g2.setColor(Color.RED);
		g2.translate(-2.55, 2.15);
		g2.scale(0.5, 0.5);
		rotatedRectangle(g2);
		g2.setTransform(basicTransform);


		g2.setColor(Color.MAGENTA);
		g2.translate(-2.6, 1.05);
		g2.scale(0.5, 0.5);
		triangle(g2);
		g2.setTransform(basicTransform);



		g2.setColor(Color.BLACK);
		g2.translate(1.9, 2.7);
		g2.scale(0.3, 0.3);
		rotatingPolygon(g2);
		g2.setTransform(basicTransform);


		g2.setColor(Color.BLACK);
		g2.translate(2.6, 2.5);
		g2.scale(0.3, 0.3);
		rotatingPolygon(g2);
		g2.setTransform(basicTransform);


		g2.setColor(Color.RED);
		g2.translate(2.25, 2.6);
		g2.scale(0.3, 0.3);
		rotatedRectangle(g2);
		g2.setTransform(basicTransform);


		g2.setColor(new Color (0, 102, 0));
		g2.translate(2.25, 1.95);
		g2.scale(0.3, 0.3);
		triangle(g2);
		g2.setTransform(basicTransform);

	}



	private void updateFrame() {
		frameNumber++;
		// TODO: If other updates are needed for the next frame, do them here.
	}

	// TODO: Define methods for drawing objects in the scene.

	private void rotatingPolygon(Graphics2D g2)
	{
		AffineTransform saveTransform = g2.getTransform();
		Color saveColor = g2.getColor();

		g2.scale(0.003, 0.003);
		g2.rotate(Math.toRadians(frameNumber*2));
		filledPolygon(g2);
		g2.setColor(saveColor);
		g2.setTransform(saveTransform);
	}

	private void triangle(Graphics2D g2)
	{
		AffineTransform saveTransform = g2.getTransform();
		Color saveColor = g2.getColor();

		g2.scale(0.8, 2.2);
		filledTriangle(g2);
		g2.setColor(saveColor);
		g2.setTransform(saveTransform);
	}

	private void rotatedRectangle(Graphics2D g2) {
		AffineTransform saveTransform = g2.getTransform();
		Color saveColor = g2.getColor();

		g2.rotate(Math.toRadians(-15));
		g2.scale(2.4, 0.14);
		g2.setColor(Color.RED);
		filledRect(g2);
		g2.setColor(saveColor);
		g2.setTransform(saveTransform);
	}




	private static void line(Graphics2D g2) {
		g2.draw( new Line2D.Double( -0.5,0, 0.5,0) );
	}

	private static void rect(Graphics2D g2) {
		g2.draw(new Rectangle2D.Double(-0.5,-0.5,1,1));
	}

	private static void filledRect(Graphics2D g2) {
		g2.fill(new Rectangle2D.Double(-0.5,-0.5,1,1));
	}

	private static void circle(Graphics2D g2) {
		g2.draw(new Ellipse2D.Double(-0.5,-0.5,1,1));
	}

	private static void filledCircle(Graphics2D g2) {
		g2.draw(new Ellipse2D.Double(-0.5,-0.5,1,1));
	}

	private static void filledTriangle(Graphics2D g2) {
		Path2D path = new Path2D.Double();
		path.moveTo(-0.5,0);
		path.lineTo(0.5,0);
		path.lineTo(0,1);
		path.closePath();
		g2.fill(path);
	}


	private static void filledPolygon(Graphics2D g2) {
		Polygon p = new Polygon();
		for (int i = 0; i < 18; i++)
			p.addPoint((int) (150 * Math.cos(i * 2 * Math.PI / 18)),
					(int) (150 * Math.sin(i * 2 * Math.PI / 18)));
		g2.fillPolygon(p);
		g2.drawPolygon(p);
	}




	private JPanel display;


	public SubroutineHierarchy() {
		display = new JPanel() {
			protected void paintComponent(Graphics g) {
				super.paintComponent(g);
				Graphics2D g2 = (Graphics2D)g.create();
				g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
				applyLimits(g2, X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM, false);
				g2.setStroke( new BasicStroke(pixelSize) );
				drawWorld(g2);
			}
		};
		display.setPreferredSize( new Dimension(WIDTH,HEIGHT));
		display.setBackground( BACKGROUND );
		final Timer timer = new Timer(17,new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				updateFrame();
				repaint();
			}
		});
		final JCheckBox animationCheck = new JCheckBox("Run Animation");
		animationCheck.addActionListener( new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				if (animationCheck.isSelected()) {
					if ( ! timer.isRunning() )
						timer.start();
				}
				else {
					if ( timer.isRunning() )
						timer.stop();
				}
			}
		});
		JPanel top = new JPanel();
		top.add(animationCheck);
		setLayout(new BorderLayout(5,5));
		setBackground(Color.DARK_GRAY);
		setBorder( BorderFactory.createLineBorder(Color.DARK_GRAY,4) );
		add(top,BorderLayout.NORTH);
		add(display,BorderLayout.CENTER);
	}




	private void applyLimits(Graphics2D g2, double xleft, double xright,
							 double ytop, double ybottom, boolean preserveAspect) {
		int width = display.getWidth();
		int height = display.getHeight();
		if (preserveAspect) {

			double displayAspect = Math.abs((double)height / width);
			double requestedAspect = Math.abs(( ybottom-ytop ) / ( xright-xleft ));
			if (displayAspect > requestedAspect) {
				double excess = (ybottom-ytop) * (displayAspect/requestedAspect - 1);
				ybottom += excess/2;
				ytop -= excess/2;
			}
			else if (displayAspect < requestedAspect) {
				double excess = (xright-xleft) * (requestedAspect/displayAspect - 1);
				xright += excess/2;
				xleft -= excess/2;
			}
		}
		double pixelWidth = Math.abs(( xright - xleft ) / width);
		double pixelHeight = Math.abs(( ybottom - ytop ) / height);
		pixelSize = (float)Math.min(pixelWidth,pixelHeight);
		g2.scale( width / (xright-xleft), height / (ybottom-ytop) );
		g2.translate( -xleft, -ytop );
	}

}