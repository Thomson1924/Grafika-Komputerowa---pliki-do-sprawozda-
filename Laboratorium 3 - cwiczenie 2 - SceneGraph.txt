package gk.lab3;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.geom.*;
import java.util.ArrayList;


public class SceneGraph extends JPanel {

	public static void main(String[] args) {
		JFrame window = new JFrame("Scene Graph 2D");
		window.setContentPane( new SceneGraph() );
		window.pack();
		window.setLocation(100,60);
		window.setResizable(false);
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setVisible(true);
	}



	private final static int WIDTH = 800;
	private final static int HEIGHT = 600;

	private final static double X_LEFT = -4;
	private final static double X_RIGHT = 4;
	private final static double Y_BOTTOM = -3;
	private final static double Y_TOP = 3;

	private final static Color BACKGROUND = Color.WHITE;

	private float pixelSize;

	private int frameNumber = 0;

	private CompoundObject world;

	// TODO: Define global variables to represent animated objects in the scene.

	private TransformedObject rotatingPolygon1;
	private TransformedObject rotatingPolygon2;
	private TransformedObject rotatingPolygon3;
	private TransformedObject rotatingPolygon4;
	private TransformedObject rotatingPolygon5;
	private TransformedObject rotatingPolygon6;

	private TransformedObject triangle1;
	private TransformedObject triangle2;
	private TransformedObject triangle3;

	private TransformedObject rotatedRectangle1;
	private TransformedObject rotatedRectangle2;
	private TransformedObject rotatedRectangle3;



	private void createWorld() {

		world = new CompoundObject();

		// TODO: Create objects and add them to the scene graph.

		rotatingPolygon1 = new TransformedObject(filledPolygon);
		rotatingPolygon1.setScale(0.003, 0.003).setTranslation(-1.1, -0.3).setColor(Color.BLACK);
		world.add(rotatingPolygon1);


		rotatingPolygon2 = new TransformedObject(filledPolygon);
		rotatingPolygon2.setScale(0.003, 0.003).setTranslation(1.1, -0.9).setColor(Color.BLACK);
		world.add(rotatingPolygon2);


		rotatedRectangle1 = new TransformedObject(filledRect);
		rotatedRectangle1.setRotation(-15).setScale(2.4, 0.14).setTranslation(0, -0.6).setColor(Color.RED);
		world.add(rotatedRectangle1);


		triangle1 = new TransformedObject(filledTriangle);
		triangle1.setScale(0.8, 2.2).setTranslation(0, -2.8).setColor(Color.BLUE);
		world.add(triangle1);



		rotatingPolygon3 = new TransformedObject(filledPolygon);
		rotatingPolygon3.setScale(0.0015, 0.0015).setTranslation(-3.1, 2.3).setColor(Color.BLACK);
		world.add(rotatingPolygon3);


		rotatingPolygon4 = new TransformedObject(filledPolygon);
		rotatingPolygon4.setScale(0.0015, 0.0015).setTranslation(-2, 2).setColor(Color.BLACK);
		world.add(rotatingPolygon4);


		rotatedRectangle2 = new TransformedObject(filledRect);
		rotatedRectangle2.setRotation(-15).setScale(1.2, 0.07).setTranslation(-2.55, 2.15).setColor(Color.RED);
		world.add(rotatedRectangle2);


		triangle2 = new TransformedObject(filledTriangle);
		triangle2.setScale(0.4, 1.1).setTranslation(-2.6, 1.05).setColor(Color.MAGENTA);
		world.add(triangle2);



		rotatingPolygon5 = new TransformedObject(filledPolygon);
		rotatingPolygon5.setScale(0.0009, 0.0009).setTranslation(1.9, 2.7).setColor(Color.BLACK);
		world.add(rotatingPolygon5);


		rotatingPolygon6 = new TransformedObject(filledPolygon);
		rotatingPolygon6.setScale(0.0009, 0.0009).setTranslation(2.6, 2.5).setColor(Color.BLACK);
		world.add(rotatingPolygon6);


		rotatedRectangle3 = new TransformedObject(filledRect);
		rotatedRectangle3.setRotation(-15).setScale(0.72, 0.042).setTranslation(2.25, 2.6).setColor(Color.RED);
		world.add(rotatedRectangle3);


		triangle3 = new TransformedObject(filledTriangle);
		triangle3.setScale(0.24, 0.66).setTranslation(2.25, 1.95).setColor(new Color (0,102,0));
		world.add(triangle3);
	}



	public void updateFrame() {
		frameNumber++;

		// TODO: Update state in preparation for drawing the next frame.

		rotatingPolygon1.setRotation(frameNumber*2);
		rotatingPolygon2.setRotation(frameNumber*2);
		rotatingPolygon3.setRotation(frameNumber*2);
		rotatingPolygon4.setRotation(frameNumber*2);
		rotatingPolygon5.setRotation(frameNumber*2);
		rotatingPolygon6.setRotation(frameNumber*2);

	}





	private static abstract class SceneGraphNode {
		Color color;
		SceneGraphNode setColor(Color c) {
			this.color = c;
			return this;
		}
		final void draw(Graphics2D g) {
			Color saveColor = null;
			if (color != null) {
				saveColor = g.getColor();
				g.setColor(color);
			}
			doDraw(g);
			if (saveColor != null) {
				g.setColor(saveColor);
			}
		}
		abstract void doDraw(Graphics2D g);
	}


	private static class CompoundObject extends SceneGraphNode {
		ArrayList<SceneGraphNode> subobjects = new ArrayList<SceneGraphNode>();
		CompoundObject add(SceneGraphNode node) {
			subobjects.add(node);
			return this;
		}
		void doDraw(Graphics2D g) {
			for (SceneGraphNode node : subobjects)
				node.draw(g);
		}
	}


	private static class TransformedObject extends SceneGraphNode {
		SceneGraphNode object;
		double rotationInDegrees = 0;
		double scaleX = 1, scaleY = 1;
		double translateX = 0, translateY = 0;
		TransformedObject(SceneGraphNode object) {
			this.object = object;
		}
		TransformedObject setRotation(double degrees) {
			rotationInDegrees = degrees;
			return this;
		}
		TransformedObject setTranslation(double dx, double dy) {
			translateX = dx;
			translateY = dy;
			return this;
		}
		TransformedObject setScale(double sx, double sy) {
			scaleX = sx;
			scaleY = sy;
			return this;
		}
		void doDraw(Graphics2D g) {
			AffineTransform savedTransform = g.getTransform();
			if (translateX != 0 || translateY != 0)
				g.translate(translateX,translateY);
			if (rotationInDegrees != 0)
				g.rotate( rotationInDegrees/180.0 * Math.PI);
			if (scaleX != 1 || scaleY != 1)
				g.scale(scaleX,scaleY);
			object.draw(g);
			g.setTransform(savedTransform);
		}
	}



	private static SceneGraphNode line = new SceneGraphNode() {
		void doDraw(Graphics2D g) {  g.draw( new Line2D.Double( -0.5,0, 0.5,0) ); }
	};

	private static SceneGraphNode rect = new SceneGraphNode() {
		void doDraw(Graphics2D g) {  g.draw(new Rectangle2D.Double(-0.5,-0.5,1,1)); }
	};

	private static SceneGraphNode filledRect = new SceneGraphNode() {
		void doDraw(Graphics2D g) {  g.fill(new Rectangle2D.Double(-0.5,-0.5,1,1)); }
	};

	private static SceneGraphNode circle = new SceneGraphNode() {
		void doDraw(Graphics2D g) {  g.draw(new Ellipse2D.Double(-0.5,-0.5,1,1)); }
	};

	private static SceneGraphNode filledCircle = new SceneGraphNode() {
		void doDraw(Graphics2D g) {  g.fill(new Ellipse2D.Double(-0.5,-0.5,1,1)); }
	};

	private static SceneGraphNode filledTriangle = new SceneGraphNode() {
		void doDraw(Graphics2D g) {
			Path2D path = new Path2D.Double();
			path.moveTo(-0.5,0);
			path.lineTo(0.5,0);
			path.lineTo(0,1);
			path.closePath();
			g.fill(path);
		}
	};


	private static SceneGraphNode filledPolygon = new SceneGraphNode() {
		void doDraw(Graphics2D g2) {
			Polygon p = new Polygon();
			for (int i = 0; i < 18; i++)
				p.addPoint((int) (150 * Math.cos(i * 2 * Math.PI / 18)),
						(int) (150 * Math.sin(i * 2 * Math.PI / 18)));
			g2.fillPolygon(p);
			g2.drawPolygon(p);
		}
	};




	private JPanel display;


	public SceneGraph() {
		display = new JPanel() {
			protected void paintComponent(Graphics g) {
				super.paintComponent(g);
				Graphics2D g2 = (Graphics2D)g.create();
				g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
				applyLimits(g2, X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM, false);
				g2.setStroke( new BasicStroke(pixelSize) );
				world.draw(g2);
			}
		};
		display.setPreferredSize( new Dimension(WIDTH,HEIGHT));
		display.setBackground( BACKGROUND );
		final Timer timer = new Timer(17,new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				updateFrame();
				repaint();
			}
		});
		final JCheckBox animationCheck = new JCheckBox("Run Animation");
		animationCheck.addActionListener( new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				if (animationCheck.isSelected()) {
					if ( ! timer.isRunning() )
						timer.start();
				}
				else {
					if ( timer.isRunning() )
						timer.stop();
				}
			}
		});
		JPanel top = new JPanel();
		top.add(animationCheck);
		setLayout(new BorderLayout(5,5));
		setBackground(Color.DARK_GRAY);
		setBorder( BorderFactory.createLineBorder(Color.DARK_GRAY,4) );
		add(top,BorderLayout.NORTH);
		add(display,BorderLayout.CENTER);
		createWorld();
	}

	private void applyLimits(Graphics2D g2, double xleft, double xright,
							 double ytop, double ybottom, boolean preserveAspect) {
		int width = display.getWidth();
		int height = display.getHeight();
		if (preserveAspect) {

			double displayAspect = Math.abs((double)height / width);
			double requestedAspect = Math.abs(( ybottom-ytop ) / ( xright-xleft ));
			if (displayAspect > requestedAspect) {
				double excess = (ybottom-ytop) * (displayAspect/requestedAspect - 1);
				ybottom += excess/2;
				ytop -= excess/2;
			}
			else if (displayAspect < requestedAspect) {
				double excess = (xright-xleft) * (requestedAspect/displayAspect - 1);
				xright += excess/2;
				xleft -= excess/2;
			}
		}
		double pixelWidth = Math.abs(( xright - xleft ) / width);
		double pixelHeight = Math.abs(( ybottom - ytop ) / height);
		pixelSize = (float)Math.min(pixelWidth,pixelHeight);
		g2.scale( width / (xright-xleft), height / (ybottom-ytop) );
		g2.translate( -xleft, -ytop );
	}

}